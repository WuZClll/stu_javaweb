目录
    ◆JSP快速入门
    ◆JSP原理
    ◆Contents
    ◆JSP脚本
    ◆EL表达式
    ◆JSTL标签
    ◆MVC模式和三层架构
    ◆案例

JSP原理分析    brand.jsp && brand.java
·概念: Java Server Pages,Java服务端页面
·JSP = HTML+ Java，用于简化开发的
    JSP本质上就是一个Servlet
·JSP在被访问时，由JSP容器(Tomcat)将其转换为Java文件(Servlet)，在由JSP容器(Tomcat)将其编译最终对外提供服务的其实就是这个字节码文件
参考web-demo src/main/webapp/login.jsp--服务器将其编译为->src/main/java/com/itheima/web/LoginServlet.java
                                                Apache Tomcat
浏|---------------请求------------->>   -----------------------------------------------
览|                                   | xxx.jsp------转换------------>>Servlet         |
器|                                   |                              hello_jsp.java   |
 |                                   |                                  |编译          |
 |<<-------------响应-----------------|--------------------------.       ↓             |
 |                                   |                           \    class           |
 |                                   |                            \hello_jsp.class    |
                                      ------------------------------------------------

● JSP脚本分类:
    1.<%...%>:内容会直接放到_jspService()方法之中
    2.<%=...%>︰内容会放到out.print()中，作为out.print()的参数
    3.<%!..%>:内容会放到_jspService()方法之外，被类直接包含


JSP缺点
由于JSP页面内，既可以定义HTML标签，又可以定义Java代码，造成了以下问题:
    1.书写麻烦:特别是复杂的页面
    2．阅读麻烦
    3.复杂度高:运行需要依赖于各种环境，JRE，JSP容器，JavaEE...
    4.占内存和磁盘:JSP会自动生成.java和.class文件占磁盘，运行的是.class文件占内存
    5.调试困难:出错后，需要找到自动生成的.java文件进行调试
    6.不利于团队协作:前端人员不会Java，后端人员不精HTML7. ..
    JSP已逐渐退出历史舞台--->html+ajax

     Servlet-->JSP-->Servlet+JSP-->Servlet+html+ajax
                           .>Servlet:逻辑处理，封装数据
     不要直接在JSP里写Java代码|
                           ·>JSP:获取数据，遍历展现数据

EL表达式    ServletDemo1.java && el-demo.jsp && brand.java
<%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false"%><%--Ignored:忽略--%>
Expression Language表达式语言，用于简化JSP页面内的Java代码
·主要功能:获取数据
语法: ${expression}
${brands}︰获取域中存储的key为brands的数据
JavaWeb中的四大域对象:
1. page:当前页面有效            |小
2. request:当前请求有效         ||范
3. session:当前会话有效         |↓围
4. application:当前应用有效     ↓大
el表达式获取数据，会依次从这4个域中寻找，直到找到为止

JSTL标签       ServletDemo2.java && ServletDemo3.java && jstl-if.jsp && jstl-foreach.jsp && brand.java
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%--引入jstl--%>
.JSP标准标签库(Jsp Standarded Taa Library)，使用标签取代JSP页面上的Java代码
JSTL标签
<c:forEach> :相当于for循环
    items:被遍历的容器
    var:遍历产生临时变量
    varStatus:遍历犬态对象
begin:开始数
end:结束数
step:步长
<c:forEach begin="0" end="10" step="1" var="i"">================================>>>>for(int i = 0; i <= 10; i++) {
${i}                                            ============相当于Java中==========>>>>  System.out.println(i);
</c:forEach>                                    ================================>>>>}

MVC模式
MVC是一种分层开发的模式，其中:
M: Model，业务模型，处理业务
V: View，视图，界面展示
c: Controller，控制器，处理请求，调用模型和视图
                      ServletDemo1,2,3:处理逻辑      JavaBean(在示例中被代码模拟了，没有用到数据库)
浏|-----------请求------->Controller(控制器)<------>Model(模型)
览|                          ↓
器|<----------响应--------View(视图)
                          xxx.jsp                               Controller和View  对应三层架构中的  表现层
MVC好处                                                          Model             对应三层架构中的  业务逻辑层和数据访问层
职责单一，互不影响
有利于分工协作
有利于组件重用

三层架构
  SSM(三大框架，暂不学)：  SpringMVC                       Spring                       MyBatis/Hibername
                         表现层                         业务逻辑层                         数据访问层                  DB
                     -------------------          -----------------------         ----------------------
                    |   Servlet         |        |    eg:  注册          |        |       selectByName   |
浏|---------请求-----|->Controller(控制器)|        |    selectByName       |        |       selectAll      |
览|                 |       ↓           | 《====》|                       |《=====》|        insert       | 《====》 DB(数据库)
器|<--------响应-----|----View(视图)      |        |       insert         |         |         update      |
                    |      JSP          |        |                       |        |        delete       |
                     -------------------          ------------------------         ---------------------
                 com.itheima.web/controller         com.itheima.service           com.itheima.dao/mapper
数据访问层:对数据库的CRUD基本操作
业务逻辑层:对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能
表现层:接收请求，封装数据，调用业务逻辑层，响应数据



